import { Api, Bot, BotError, Context, GrammyError, HttpError, InlineKeyboard, RawApi } from 'grammy'
import axios from 'axios'
import mongoose from 'mongoose'
import UserScheme from './schemes/User.scheme'
import { SearchParams } from './types/main'
require('dotenv').config()



// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
mongoose.connect(process.env.MONGO_URI, {})
    .then(() => console.log('MongoDB connection successful!'))
    .catch((err) => console.error(err))

// —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–æ—Ç–∞
const bot: Bot<Context, Api<RawApi>> = new Bot(process.env.BOT_TOKEN)

// —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø–æ–≥–æ–¥—ã
function weatherText(response: any): string {
    return `üèôÔ∏è –ü–æ–≥–æ–¥–∞ –≤ ${response.data.name}
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${response.data.main.temp} ¬∞C
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${response.data.main.humidity}%
üå´Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å: ${response.data.visibility} –º–µ—Ç—Ä–æ–≤
üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${response.data.wind.speed} –ú–µ—Ç—Ä–æ–≤/—Å–µ–∫—É–Ω–¥—É`;
}

// —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('start', async (ctx: Context) => {
    // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    const userEntity = await UserScheme.findOne({ id: ctx.from?.id })
    if (!userEntity) await UserScheme.create({ id: ctx.from?.id })
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏!.', {
        reply_markup: new InlineKeyboard().text('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞', 'favorites')
    })
})

// –∫–æ–º–∞–Ω–¥–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
bot.command('favorites', async (ctx: Context) => {
    const userEntity = await UserScheme.findOne({ id: ctx.from?.id })
    const favoritesKeyBoard: InlineKeyboard = new InlineKeyboard()

    userEntity!.favorites.forEach(x => {
        favoritesKeyBoard.text(x, `city::${x}`).row()
    })

    if (!userEntity!.favorites.length) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤!')

    await ctx.reply('–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤', {
        reply_markup: favoritesKeyBoard
    })
})

// –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', async (ctx: Context) => {
    let params: SearchParams = {
        units: 'metric',
        appid: process.env.APPID,
        lang: ctx.from?.language_code
    }
    params = ctx.message?.location ? {
        ...params,
        lat: ctx.message?.location.latitude,
        lon: ctx.message?.location.longitude
    } : {
        ...params,
        q: ctx.message?.text
    }
    try {
        const responseMessageEntity = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {
            params
        })

        return ctx.reply(weatherText(responseMessageEntity), {
            reply_markup: new InlineKeyboard().text('‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ', `favorite::${responseMessageEntity.data.name}`)
        })

    } catch (err: any) {
        if (err.response.status === 404) {
            return ctx.reply('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        }
    }
})

// –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query:data', async (ctx: Context) => {
    const data: string | undefined = ctx.callbackQuery?.data
    const userEntity = await UserScheme.findOne({ id: ctx.from?.id })
    switch (data?.split('::')[0]) {
        // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        case 'favorite':
            if (userEntity?.favorites.includes(data?.split('::')[1])) {
                return ctx.answerCallbackQuery('‚ùå –ì–æ—Ä–æ–¥ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!')
            }

            userEntity?.favorites.push(data?.split('::')[1])
            await userEntity?.save()
            return ctx.editMessageText(<string>ctx.update.callback_query!.message!.text, {
                reply_markup: new InlineKeyboard().text('üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', `deleteFavorite::${data?.split('::')[1]}`)
            })

        // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        case 'favorites':
            const favoritesKeyBoard: InlineKeyboard = new InlineKeyboard()

            userEntity!.favorites.forEach(x => {
                favoritesKeyBoard.text(x, `city::${x}`).row()
            })

            if (!userEntity!.favorites.length) return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤!')

            await ctx.editMessageText('–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤', {
                reply_markup: favoritesKeyBoard
            })
            break
        // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        case 'city':
            const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${data?.split('::')[1]}&units=metric&appid=ae1c9eb796b656ea1d4b725937875170&lang=${ctx.from?.language_code}`)
            await ctx.editMessageText(`üèô–ü–æ–≥–æ–¥–∞ –≤ ${response.data.name}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${response.data.main.temp} ¬∞C\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${response.data.main.humidity}%\nüå´Ô∏è–í–∏–¥–∏–º–æ—Å—Ç—å: ${response.data.visibility} –º–µ—Ç—Ä–æ–≤\nüí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${response.data.wind.speed} –ú–µ—Ç—Ä–æ–≤/–°–µ–∫—É–Ω–¥—É`, {
                reply_markup: new InlineKeyboard().text('üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', `deleteFavorite::${response.data.name}`)
            })
            break
        // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        case 'deleteFavorite':
            const findIndex: number = userEntity!.favorites.findIndex(x => x === data?.split('::')[1])
            userEntity!.favorites.splice(findIndex, 1)
            await userEntity!.save()
            await ctx.editMessageText(<string>ctx.update.callback_query!.message!.text, {
                reply_markup: new InlineKeyboard().text('‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', `favorite::${data?.split('::')[1]}`)
            })
            break
    }

})

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: BotError<Context>): void => {
    const ctx = err.ctx
    console.error(`Error while handling update ${ctx.update.update_id}:`)
    const e = err.error
    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description)
    } else if (e instanceof HttpError) {
        console.error('Could not contact Telegram:', e)
    } else {
        console.error('Unknown error:', e)
    }
})

// –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start().then(r => console.log('Bot ready'))


declare global {
    namespace NodeJS {
        interface ProcessEnv {
            BOT_TOKEN: string
            MONGO_URI: string
            APPID: string
        }
    }
}